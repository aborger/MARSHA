#!/usr/bin/env python

import rospy

from std_msgs.msg import Empty


from geometry_msgs.msg import Point
from geometry_msgs.msg import Pose
from geometry_msgs.msg import Vector3

from std_srvs.srv import Trigger

from marsha_msgs.srv import PostureCmd
from marsha_msgs.srv import MoveCmd
from marsha_msgs.srv import PredictPosition
from marsha_msgs.srv import ObjectObservation

from tf.transformations import quaternion_from_euler

class Catcher():
    def __init__(self):
        rospy.init_node("catcher")

        self.reset_pub = rospy.Publisher("/reset", Empty, queue_size=10)

        # Robot control
        rospy.wait_for_service('/left/pose_cmd')
        self.pose_cmd = rospy.ServiceProxy('/left/pose_cmd', MoveCmd)

        rospy.wait_for_service('left/joint_pose_cmd')
        self.joint_pose_cmd = rospy.ServiceProxy('/left/joint_pose_cmd', MoveCmd)

        rospy.wait_for_service('/left/posture_cmd')
        self.posture_cmd = rospy.ServiceProxy('/left/posture_cmd', PostureCmd)

        rospy.wait_for_service('/left/gripper/grasp_cmd')
        self.grasp_cmd = rospy.ServiceProxy('/left/gripper/grasp_cmd', MoveCmd)

        # Object trajectory
        rospy.wait_for_service('predict_position')
        self.predict_position = rospy.ServiceProxy('predict_position', PredictPosition)

        rospy.wait_for_service('observe_trajectory')
        self.observe_trajectory = rospy.ServiceProxy('observe_trajectory', ObjectObservation)

        rospy.wait_for_service('prediction_ready')
        self.prediction_ready = rospy.ServiceProxy('prediction_ready', Trigger)

    def catch(self):
        self.grasp_cmd("open")
        self.joint_pose_cmd("catch")
        self.reset_pub.publish()

        poll_rate = rospy.Rate(75)
        while not self.prediction_ready().success:
            print("waiting")
            poll_rate.sleep()

        prediction = self.predict_position(0.1)

        print("predicted position: " + str(prediction.position))

        pose = Pose()
        pose.position = prediction.position

        q = quaternion_from_euler(0, 0, -1.57)
      
        pose.orientation.x = 0
        pose.orientation.y = 0
        pose.orientation.z = 1
        pose.orientation.w = 0

        print(self.posture_cmd(pose))

        time_until = prediction.predicted_time.data - rospy.get_rostime()
        rospy.sleep(time_until+rospy.Duration(0.05))

        self.grasp_cmd("close")

        
if __name__ == "__main__":
    catcher = Catcher()
    rospy.sleep(1)
    catcher.catch()