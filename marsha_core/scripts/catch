#!/usr/bin/env python

import time
import rospy

from std_msgs.msg import Empty


from geometry_msgs.msg import Point
from geometry_msgs.msg import Pose
from geometry_msgs.msg import Vector3

from std_srvs.srv import Trigger

from marsha_msgs.srv import PostureCmd
from marsha_msgs.srv import MoveCmd
from marsha_msgs.srv import PredictPosition
from marsha_msgs.srv import ObjectObservation

class Catcher():
    def __init__(self):
        rospy.init_node("catcher")

        self.reset_pub = rospy.Publisher("/reset", Empty, queue_size=10)

        # Robot control
        rospy.wait_for_service('/left/pose_cmd')
        self.pose_cmd = rospy.ServiceProxy('/left/pose_cmd', MoveCmd)

        rospy.wait_for_service('/left/posture_cmd')
        self.posture_cmd = rospy.ServiceProxy('/left/posture_cmd', PostureCmd)

        rospy.wait_for_service('/left/gripper/grasp_cmd')
        self.grasp_cmd = rospy.ServiceProxy('/left/gripper/grasp_cmd', MoveCmd)

        # Object trajectory
        rospy.wait_for_service('predict_position')
        self.predict_position = rospy.ServiceProxy('predict_position', PredictPosition)

        rospy.wait_for_service('observe_trajectory')
        self.observe_trajectory = rospy.ServiceProxy('observe_trajectory', ObjectObservation)

        rospy.wait_for_service('prediction_ready')
        self.prediction_ready = rospy.ServiceProxy('prediction_ready', Trigger)

    def catch(self):
        

        self.grasp_cmd("open")
        self.pose_cmd("handoff")
        self.reset_pub.publish()
       
        poll_rate = rospy.Rate(75)
        while not self.prediction_ready().success:
            print("waiting")
            poll_rate.sleep()

        prediction = self.predict_position(0.1)


        print("predicted position:\n" + str(prediction.position))


        pose = Pose()
        pose.position = prediction.position

        pose.orientation.x = 0
        pose.orientation.y = 0
        pose.orientation.z = 1
        pose.orientation.w = 0
        success = self.posture_cmd(pose)

        time_until = prediction.predicted_time.data - rospy.get_rostime()

        print("predicted time:" + str(time_until.to_sec()))

        print("Move success: " + str(success))
        rospy.sleep(time_until)

        self.grasp_cmd("close")
        #success = self.pose_cmd("0g_pickup")
        #self.grasp_cmd("open")
        #print("Move Success: " + str(success.done))


if __name__ == "__main__":
    catcher = Catcher()
    time.sleep(1)
    catcher.catch()