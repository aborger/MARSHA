#!/usr/bin/env python

# Payload Control System

import rospy
import smach
import smach_ros

from marsha_core.pcs_node import PCSstate
from marsha_core.pcs_node import PCScmd
from marsha_core.payload_command_system import PCS_SM
from marsha_core.pcs_states import *

import os

USE_AI = True

class Right_PCS(PCS_SM):
    def __init__(self):
        PCS_SM.__init__(self)

    def mission_sm(self):
        with self.sm:

            # if fail do with one arm
            smach.StateMachine.add('Jetson_Sync_0', Jetson_Sync(0, timeout=60),
                    transitions={'Ready': 'Check_RBF_Status',
                                    'Timeout': 'Signal_Err'})
            """
            smach.StateMachine.add('Activate_Longeron_Cams', Activate_Longeron_Cams("longeron_cams", self.pcs_node_state, self.pcs_node_cmd),
                               transitions={'Success': 'Signal_Init',
                                             'Error': 'Signal_Init'})
            """

            smach.StateMachine.add('Check_RBF_Status', Check_RBF_Status("rbf_detector", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Enabled': "Signal_FDI_Active",
                                             'Disabled': "Signal_Init"})


            smach.StateMachine.add('Signal_FDI_Active', Blink_LED("green_led", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={"Success": 'Mission_Success',
                                            'Error': 'Mission_Success'})

            smach.StateMachine.add('Signal_Init', Activate_Led("green_led", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Success': 'Wait_for_TE',
                                             'Error': 'Set_Mission_Clock'})
            
            smach.StateMachine.add('Wait_for_TE', Wait_for_TE("te_detector", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Success': 'Set_Mission_Clock',
                                             'Error': 'Signal_Err'})
            
            smach.StateMachine.add('Set_Mission_Clock', Set_Mission_Clock(82),
                                transitions={'Done': 'Deactivate_Led'})


            smach.StateMachine.add('Deactivate_Led', Deactivate_Led("green_led", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Success': 'Jetson_Sync_TE',
                                             'Error': 'Jetson_Sync_TE'})

            # if timeout, only one jetson recieved te
            smach.StateMachine.add('Jetson_Sync_TE', Jetson_Sync("TE", timeout=600),
                                transitions={'Ready': 'Unlatch',
                                             'Timeout': 'Signal_Err'})



            smach.StateMachine.add('Unlatch', Grasp_Cmd_State("half_closed"),
                                transitions={'Success': 'Unfold',
                                             'Error': 'Unfold'})

            smach.StateMachine.add('Unfold', Unfold_SM,
                                transitions={'Success': 'Catch_SM',
                                            'Fail': 'Signal_Err'})

            smach.StateMachine.add('Other_Ball_Status', Ball_Status(other_arm_status=True),
                                transitions={'2': 'Catch_SM_spinup_check',
                                             '1': 'Catch_SM_spinup_check',
                                             '0': 'Check_Reload'})
            """
            smach.StateMachine.add('Catch_SM', Catch_SM,
                                    transitions={'Catch_Success': 'Throw_SM',
                                                'Catch_Fail': 'Other_Ball_Status'})
            """

            smach.StateMachine.add('Catch_SM_spinup_check', Check_for_Spinup(),
                                   transitions={'Spinup': 'Prepare_to_Latch',
                                                'no_spinup': 'Catch_SM'})

            smach.StateMachine.add('Catch_SM', Catch_SM,
                                    transitions={'Catch_Success': 'Throw_SM',
                                                'Catch_Fail': 'Other_Ball_Status'})

            smach.StateMachine.add('Check_Reload', Ball_Status(),
                                transitions={'2': 'Prepare_Reload',
                                            '1': 'Prepare_Reload',
                                            '0': 'Prepare_to_Latch'})

            smach.StateMachine.add('Prepare_Reload', Fold_SM,
                                transitions={'Success': 'Reload_SM',
                                            'Fail': 'Mission_Fail'}) 

            smach.StateMachine.add('Reload_SM', Reload_SM,
                                transitions={'Success': 'Check_for_Spinup',
                                             'Out_Of_Balls': 'Prepare_to_Latch',
                                             'Fail': 'Mission_Fail'})

            smach.StateMachine.add('Check_for_Spinup', Check_for_Spinup(),
                                transitions={'Spinup': 'Prepare_to_Latch',
                                             'no_spinup': 'Throw_SM'})


            smach.StateMachine.add('Throw_SM', Throw_SM,
                                transitions={"Pass_Complete": 'Catch_SM_spinup_check',
                                            "Throw_Success": 'Check_Reload',
                                            "Throw_Fail": 'Mission_Fail'})



            smach.StateMachine.add('Prepare_to_Latch', Fold_SM,
                                transitions={'Success': 'Latch',
                                                'Fail': 'Signal_Err'})


            smach.StateMachine.add('Latch', Joint_Pose_State("home"),
                                transitions={'Success': 'Secure_Latch',
                                             'Error': 'Signal_Err'})

            smach.StateMachine.add('Secure_Latch', Grasp_Cmd_State("grasp_mount"),
                                transitions={'Success': 'Mission_Success',
                                             'Error': 'Signal_Err'})



            smach.StateMachine.add('Signal_Err', Activate_Led("red_led", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Success': 'Latch',
                                             'Error': 'Mission_Fail'})

            """



            
            smach.StateMachine.add('Activate_Longeron_Cams', Activate_Longeron_Cams("longeron_cams", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Success': 'Deactivate_Longeron_Cams',
                                             'Error': 'Mission_Fail'})

            smach.StateMachine.add('Deactivate_Longeron_Cams', Deactivate_Longeron_Cams("longeron_cams", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Success': 'Mission_Success',
                                             'Error': 'Mission_Fail'})
            """

class Sim_PCS(PCS_SM):
    def __init__(self):
        PCS_SM.__init__(self)

        with self.sm:
            # if this fails perform experiment with one arm
            """
            smach.StateMachine.add('Jetson_Comm_Check', Jetson_Comm_Check(self.connection_status),
                                transitions={'Success': 'Home', # usually Teensy comm check
                                             'Error': 'Mission_Fail'})
            """

            # ensures same starting position
            smach.StateMachine.add('Home', Home(),
                                transitions={'Success': 'AI_Initialization',
                                            'Error': 'Mission_Fail'})

            smach.StateMachine.add('AI_Initialization', Wait_for_AI("ai_agent", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Success': 'Jetson_Sync_0',
                                             'Error': 'Mission_Fail'})

            # Ready to unlatch
            smach.StateMachine.add('Jetson_Sync_0', Jetson_Sync(0, timeout=60),
                                transitions={'Ready': 'Set_Mission_Clock',
                                             'Timeout': 'Mission_Fail'})

            smach.StateMachine.add('Set_Mission_Clock', Set_Mission_Clock(82),
                                transitions={'Done': 'Unfold'})

            smach.StateMachine.add('Unfold', Unfold_SM,
                                transitions={'Success': 'Catch_SM',
                                             'Fail': 'Mission_Fail'})

            smach.StateMachine.add('Other_Ball_Status', Ball_Status(other_arm_status=True),
                                transitions={'2': 'Catch_SM',
                                             '1': 'Catch_SM',
                                             '0': 'Check_Reload'})

            if USE_AI:
                # ideally the AI_Catch_SM goes in the pcs_states library, but the PCS_States need to be passed the pcs_comms
                AI_Catch_SM = smach.StateMachine(outcomes=["Catch_Success", "Catch_Fail"])

                with AI_Catch_SM:

                    smach.StateMachine.add('Pre_Catch', Joint_Pose_State("pre_catch"),
                                        transitions={'Success': 'Open_Gripper',
                                                    'Error': 'Catch_Fail'})

                    smach.StateMachine.add('Open_Gripper', Grasp_Cmd_State("open"),
                                        transitions={'Success': 'Jetson_Sync_Pass',
                                                    'Error': 'Catch_Fail'})

                    smach.StateMachine.add('Jetson_Sync_Pass', Jetson_Sync("pass", timeout=60),
                                        transitions={'Ready': 'Signal_Catch',
                                                     'Timeout': 'Catch_Fail'})

                    smach.StateMachine.add('Signal_Catch', Signal_Catch(),
                                        transitions={'Done': 'AI_Catch'})

                    smach.StateMachine.add('AI_Catch', Activate_AI("ai_agent", self.pcs_node_state, self.pcs_node_cmd),
                                        transitions={'Success': 'Wait_for_Catch',
                                                    'Error': 'Catch_Fail'})

                    smach.StateMachine.add('Wait_for_Catch', AI_Catch_Status("ai_agent", self.pcs_node_state, self.pcs_node_cmd),
                                        transitions={'Success': 'Is_Grasped',
                                                    'Error': 'Is_Grasped'}) 

                    # Check for grasped which also updates other arm on catch status
                    smach.StateMachine.add('Is_Grasped', Is_Grasped(),
                                        transitions={'Success': 'Catch_Success',
                                                     'Fail': 'Catch_Fail'})

           

                smach.StateMachine.add('Catch_SM', AI_Catch_SM,
                                    transitions={'Catch_Success': 'Throw_SM',
                                                 'Catch_Fail': 'Other_Ball_Status'})
            else:
                smach.StateMachine.add('Catch_SM', Catch_SM,
                                    transitions={'Catch_Success':  'Throw_SM',
                                                'Catch_Fail': 'Other_Ball_Status'})

            smach.StateMachine.add('Check_Reload', Ball_Status(),
                                transitions={'2': 'Prepare_Reload',
                                            '1': 'Prepare_Reload',
                                            '0': 'Prepare_to_Latch'}) 

            smach.StateMachine.add('Prepare_Reload', Fold_SM,
                                transitions={'Success': 'Reload_SM',
                                            'Fail': 'Mission_Fail'}) 

            smach.StateMachine.add('Reload_SM', Reload_SM,
                                transitions={'Success': 'Throw_SM',
                                             'Out_Of_Balls': 'Prepare_to_Latch',
                                             'Fail': 'Mission_Fail'}) 

            smach.StateMachine.add('Throw_SM', Throw_SM,
                                transitions={"Pass_Complete": 'Catch_SM',
                                             "Throw_Success": 'Check_Reload',
                                             "Throw_Fail": 'Mission_Fail'})
            
            smach.StateMachine.add('Prepare_to_Latch', Fold_SM,
                                transitions={'Success': 'Open_Latch',
                                             'Fail': 'Mission_Fail'})

            smach.StateMachine.add('Open_Latch', Grasp_Cmd_State("half_closed"),
                                transitions={'Success': 'Latch',
                                             'Error': 'Mission_Fail'})

            smach.StateMachine.add('Latch', Joint_Pose_State("home"),
                                transitions={'Success': 'Secure_Latch',
                                             'Error': 'Mission_Fail'})

            # Check for grasped object to ensure latch is successful
            smach.StateMachine.add('Secure_Latch', Grasp_Cmd_State("close"),
                                transitions={'Success': 'Mission_Success',
                                             'Error': 'Mission_Fail'})

class Test_PCS(PCS_SM):
    def __init__(self):
        PCS_SM.__init__(self)

    def mission_sm(self):
        handshake = (self.get_handshake_status, self.reset_handshake, self.set_sync_id)
        with self.sm:   
            smach.StateMachine.add('Jetson_Comm_Check', Jetson_Comm_Check(self.connection_status),
                                transitions={'Success': 'Activate_Depth_Cam', # usually Teensy comm check
                                             'Error': 'Mission_Fail'})

            smach.StateMachine.add('Activate_Depth_Cam', Activate_Depth_Cam("depth_cam", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Success': 'Deactivate_Depth_Cam',
                                             'Error': 'Mission_Fail'})

            smach.StateMachine.add('Deactivate_Depth_Cam', Deactivate_Depth_Cam("depth_cam", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Success': 'Shutdown_Depth_Cam',
                                             'Error': 'Mission_Fail'})

            smach.StateMachine.add('Shutdown_Depth_Cam', Shutdown_Depth_Cam("depth_cam", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Success': 'Mission_Success',
                                             'Error': 'Mission_Fail'})
            
if __name__ == "__main__":
    rospy.init_node("PCS")
    os.system("/home/jet/marsha/service_log/get_status.bash")
    sm = Right_PCS()
    try:
        sm.run()
    except KeyboardInterrupt:
        pass

    rospy.set_param('/mission_complete', True)
