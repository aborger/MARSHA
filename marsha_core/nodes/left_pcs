#!/usr/bin/env python

# Payload Control System

import rospy
import smach
import smach_ros

from marsha_core.pcs_node import PCSstate
from marsha_core.pcs_node import PCScmd
from marsha_core.payload_command_system import PCS_SM
from marsha_core.pcs_states import *






class Left_PCS(PCS_SM):
    def __init__(self):
        PCS_SM.__init__(self)


    def mission_sm(self):
        handshake = (self.get_handshake_status, self.reset_handshake, self.set_sync_id)
        with self.sm:
            # if this fails perform experiment with one arm
            #smach.StateMachine.add('Jetson_Comm_Check', Jetson_Comm_Check(self.connection_status),
            #                    transitions={'Success': 'Wait_for_TE', # usually Teensy comm check
            #                                 'Error': 'Mission_Fail'})

            # if this fails perform experiment with one arm
            # need to send msg to other arm that this failed
            #smach.StateMachine.add('Teensy_Comm_Check', Teensy_Comm_Check("teensy_interface", self.pcs_node_state, self.pcs_node_cmd),
            #                    transitions={'Success': 'Jetson_Sync_0',
            #                                 'Error': 'Mission_Fail'})

            #smach.StateMachine.add('Jetson_Sync_0', Jetson_Sync(0, self.jet_comm, handshake),
            #                    transitions={'Ready': 'Activate_Longeron_Cams',
            #                                 'Timeout': 'Mission_Fail'})

            #smach.StateMachine.add('Activate_Longeron_Cams', Activate_Longeron_Cams("longeron_cams", self.pcs_node_state, self.pcs_node_cmd),
            #                    transitions={'Success': 'Wait_for_TE',
            #                                 'Error': 'Mission_Fail'})

            smach.StateMachine.add('Wait_for_TE', Wait_for_TE("te_detector", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Success': 'Jetson_Sync_0',
                                             'Error': 'Mission_Fail'})

            smach.StateMachine.add('Jetson_Sync_0', Jetson_Sync(0, self.jet_comm, handshake),
                                transitions={'Ready': 'Unfold',
                                             'Timeout': 'Mission_Fail'})


            smach.StateMachine.add('Unfold', Unfold_SM,
                                transitions={'Success': 'Fold',
                                             'Fail': 'Fold'})

            smach.StateMachine.add('Fold', Fold_SM,
                                transitions={'Success': 'Mission_Success',
                                             'Fail': 'Mission_Fail'})





            # If this state times out, only one jetson recieved TE signal
            #smach.StateMachine.add('Jetson_Sync_1', Jetson_Sync(1, self.jet_comm, handshake, timeout=10),
            #                    transitions={'Ready': 'Deactivate_Longeron_Cams',
            #                                 'Timeout': 'Mission_Fail'})
            

            #smach.StateMachine.add('Deactivate_Longeron_Cams', Deactivate_Longeron_Cams("longeron_cams", self.pcs_node_state, self.pcs_node_cmd),
            #                   transitions={'Success': 'Mission_Success',
            #                                 'Error': 'Mission_Fail'})
            
class Test_PCS(PCS_SM):
    def __init__(self):
        self.balls_remaining = 4

        PCS_SM.__init__(self)


    def get_balls_remaining(self):
        return self.balls_remaining

    def decrease_balls(self):
        self.balls_remaining -= 1 


    def mission_sm(self):
        handshake = (self.get_handshake_status, self.reset_handshake, self.set_sync_id)
        with self.sm:
            # if this fails perform experiment with one arm
            smach.StateMachine.add('Jetson_Comm_Check', Jetson_Comm_Check(self.connection_status),
                                transitions={'Success': 'Home', # usually Teensy comm check
                                             'Error': 'Mission_Fail'})

            # ensures same starting position
            smach.StateMachine.add('Home', Home(),
                                transitions={'Success': 'Jetson_Sync_0',
                                            'Error': 'Mission_Fail'})

            smach.StateMachine.add('Jetson_Sync_0', Jetson_Sync(0, self.jet_comm, handshake),
                                transitions={'Ready': 'Reload',
                                             'Timeout': 'Mission_Fail'})

            Reload_SM = smach.StateMachine(outcomes=["Success", "Out_Of_Balls", "Reload_Fail"])

            with Reload_SM:

                smach.StateMachine.add('Step_0', Step_0(),
                                    transitions={'Success': 'Ball_Status',
                                                'Error': 'Reload_Fail'})

                smach.StateMachine.add('Ball_Status', Ball_Status(self.get_balls_remaining, self.decrease_balls),
                                    transitions={'4_Balls': 'Pickup_1',
                                                 '3_Balls': 'Pickup_2',
                                                 '2_Balls': 'Out_Of_Balls', 
                                                 '1_Balls': 'Out_Of_Balls', 
                                                 '0_Balls': 'Out_Of_Balls',
                                                 'Error': 'Reload_Fail'})

                smach.StateMachine.add('Pickup_1', Pickup_1(),
                                    transitions={'Success': 'Success',
                                                'Error': 'Ball_Status'})

                smach.StateMachine.add('Pickup_2', Pickup_2(),
                                    transitions={'Success': 'Success',
                                                'Error': 'Ball_Status'})

            smach.StateMachine.add('Reload', Reload_SM,
                                transitions={'Success': 'Unfold',
                                             'Out_Of_Balls': 'Jetson_Sync_2',
                                             'Reload_Fail': 'Mission_Fail'})



            smach.StateMachine.add('Unfold', Unfold(),
                                transitions={'Success': 'Jetson_Sync_1',
                                            'Error': 'Mission_Fail'})

            # about to throw
            smach.StateMachine.add('Jetson_Sync_1', Jetson_Sync(1, self.jet_comm, handshake),
                                transitions={'Ready': 'Throw',
                                             'Timeout': 'Mission_Fail'})            

            smach.StateMachine.add('Throw', Throw(),
                                transitions={'Success': 'Fold',
                                            'Error': 'Mission_Fail'})

            smach.StateMachine.add('Fold', Fold(),
                                transitions={'Success': 'Reload',
                                            'Error': 'Mission_Fail'})

            # Ready for left arm to catch, right arm to throw
            smach.StateMachine.add('Jetson_Sync_2', Jetson_Sync(2, self.jet_comm, handshake, timeout=30),
                                            transitions={'Ready': 'Jetson_Sync_2',
                                                        'Timeout': 'Mission_Fail'})
            # Ready to latch
            smach.StateMachine.add('Jetson_Sync_3', Jetson_Sync(3, self.jet_comm, handshake, timeout=60),
                                            transitions={'Ready': 'Latch',
                                                        'Timeout': 'Mission_Fail'})

            
            smach.StateMachine.add('Latch', Latch(),
                                transitions={'Success': 'Mission_Success',
                                            'Error': 'Mission_Fail'})



            """
            smach.StateMachine.add('Activate_Longeron_Cams', Activate_Longeron_Cams("longeron_cams", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Success': 'Deactivate_Longeron_Cams',
                                             'Error': 'Mission_Fail'})

            smach.StateMachine.add('Deactivate_Longeron_Cams', Deactivate_Longeron_Cams("longeron_cams", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Success': 'Mission_Success',
                                             'Error': 'Mission_Fail'})
            """

if __name__ == "__main__":
    rospy.init_node("PCS")
    sm = Left_PCS()
    try:
        sm.run()
    except KeyboardInterrupt:
        pass