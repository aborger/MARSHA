#!/usr/bin/env python

# Payload Control System

import rospy
import smach
import smach_ros

from marsha_core.pcs_node import PCSstate
from marsha_core.pcs_node import PCScmd
from marsha_core.payload_command_system import PCS_SM
from marsha_core.pcs_states import *






class Left_PCS(PCS_SM):
    def __init__(self):
        PCS_SM.__init__(self)


    def mission_sm(self):
        handshake = (self.get_handshake_status, self.reset_handshake, self.set_sync_id)
        with self.sm:
            # if this fails perform experiment with one arm
            #smach.StateMachine.add('Jetson_Comm_Check', Jetson_Comm_Check(self.connection_status),
            #                    transitions={'Success': 'Wait_for_TE', # usually Teensy comm check
            #                                 'Error': 'Mission_Fail'})

            # if this fails perform experiment with one arm
            # need to send msg to other arm that this failed
            #smach.StateMachine.add('Teensy_Comm_Check', Teensy_Comm_Check("teensy_interface", self.pcs_node_state, self.pcs_node_cmd),
            #                    transitions={'Success': 'Jetson_Sync_0',
            #                                 'Error': 'Mission_Fail'})

            #smach.StateMachine.add('Jetson_Sync_0', Jetson_Sync(0, self.jet_comm, handshake),
            #                    transitions={'Ready': 'Activate_Longeron_Cams',
            #                                 'Timeout': 'Mission_Fail'})

            #smach.StateMachine.add('Activate_Longeron_Cams', Activate_Longeron_Cams("longeron_cams", self.pcs_node_state, self.pcs_node_cmd),
            #                    transitions={'Success': 'Wait_for_TE',
            #                                 'Error': 'Mission_Fail'})

            smach.StateMachine.add('Wait_for_TE', Wait_for_TE("te_detector", self.pcs_node_state, self.pcs_node_cmd),
                                transitions={'Success': 'Unfold',
                                             'Error': 'Mission_Fail'})


            smach.StateMachine.add('Unfold', Unfold_SM,
                                transitions={'Success': 'Fold',
                                             'Fail': 'Fold'})

            smach.StateMachine.add('Fold', Fold_SM,
                                transitions={'Success': 'Mission_Success',
                                             'Fail': 'Mission_Fail'})





            # If this state times out, only one jetson recieved TE signal
            #smach.StateMachine.add('Jetson_Sync_1', Jetson_Sync(1, self.jet_comm, handshake, timeout=10),
            #                    transitions={'Ready': 'Deactivate_Longeron_Cams',
            #                                 'Timeout': 'Mission_Fail'})
            

            #smach.StateMachine.add('Deactivate_Longeron_Cams', Deactivate_Longeron_Cams("longeron_cams", self.pcs_node_state, self.pcs_node_cmd),
            #                   transitions={'Success': 'Mission_Success',
            #                                 'Error': 'Mission_Fail'})
            
class Sim_PCS(PCS_SM):
    def __init__(self):
        PCS_SM.__init__(self)

    # mission_fails should result in checking what is wrong and then resuming state machine
    # need to put a time limit
    def mission_sm(self):

        with self.sm:
            # if this fails perform experiment with one arm
            """
            smach.StateMachine.add('Jetson_Comm_Check', Jetson_Comm_Check(self.connection_status),
                                transitions={'Success': 'Home', # usually Teensy comm check
                                             'Error': 'Mission_Fail'})
            """

            # ensures same starting position
            smach.StateMachine.add('Home', Home(),
                                transitions={'Success': 'Jetson_Sync_0',
                                            'Error': 'Mission_Fail'})

            smach.StateMachine.add('Jetson_Sync_0', Jetson_Sync(0, timeout=30),
                                transitions={'Ready': 'Reload_SM',
                                             'Timeout': 'Mission_Fail'})

            smach.StateMachine.add('Check_Reload', Ball_Status(),
                                transitions={'2': 'Prepare_Reload',
                                            '1': 'Prepare_Reload',
                                            '0': 'Other_Ball_Status'}) 

            smach.StateMachine.add('Prepare_Reload', Fold_SM,
                                transitions={'Success': 'Reload_SM',
                                            'Fail': 'Mission_Fail'}) 

            smach.StateMachine.add('Reload_SM', Reload_SM,
                                transitions={'Success': 'Throw_SM',
                                             'Out_Of_Balls': 'Other_Ball_Status',
                                             'Fail': 'Mission_Fail'})


            smach.StateMachine.add('Throw_SM', Throw_SM,
                                transitions={"Pass_Complete": 'Catch_SM',
                                             "Throw_Success": 'Check_Reload',
                                             "Throw_Fail": 'Mission_Fail'})

            # throw sm goes back and picks a ball up
            smach.StateMachine.add('Catch_SM', Catch_SM,
                                transitions={'Catch_Success': 'Throw_SM',
                                             'Catch_Fail': 'Other_Ball_Status'})

            smach.StateMachine.add('Other_Ball_Status', Ball_Status(other_arm_status=True),
                                transitions={'2': 'Catch_SM',
                                             '1': 'Catch_SM',
                                             '0': 'Prepare_to_Latch'})

            smach.StateMachine.add('Prepare_to_Latch', Fold_SM,
                                transitions={'Success': 'Open_Latch',
                                             'Fail': 'Mission_Fail'})

            smach.StateMachine.add('Open_Latch', Grasp_Cmd_State("half_closed"),
                                transitions={'Success': 'Latch',
                                             'Error': 'Mission_Fail'})

            smach.StateMachine.add('Latch', Joint_Pose_State("home"),
                                transitions={'Success': 'Secure_Latch',
                                             'Error': 'Mission_Fail'})

            # Check for grasped object to ensure latch is successful
            smach.StateMachine.add('Secure_Latch', Grasp_Cmd_State("close"),
                                transitions={'Success': 'Mission_Success',
                                             'Error': 'Mission_Fail'})




if __name__ == "__main__":
    rospy.init_node("PCS")
    sm = Sim_PCS()
    try:
        sm.run()
    except KeyboardInterrupt:
        pass