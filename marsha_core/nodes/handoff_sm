#!/usr/bin/env python

import rospy
import smach
import smach_ros

from marsha_msgs.srv import MoveCmd
from marsha_msgs.srv import StateComm
from marsha_msgs.srv import GraspedState
from std_srvs.srv import Trigger, TriggerRequest
from std_msgs.msg import Empty


from time import sleep

def graspCommand(pose_name):
    rospy.wait_for_service('grasp_cmd')

    cmd = rospy.ServiceProxy('grasp_cmd', MoveCmd)

    rospy.loginfo('Executing Grasp Command...')
    success = cmd(pose_name)

    return success.done

def command(pose_name):
    rospy.wait_for_service('pose_cmd')

    cmd = rospy.ServiceProxy('pose_cmd', MoveCmd)


    success = cmd(pose_name)
    return success.done

def isGrasped():
    rospy.wait_for_service(rospy.get_namespace() + 'is_grasped')

    
    call_server = rospy.ServiceProxy(rospy.get_namespace() + 'is_grasped', Trigger)

    grasped = call_server().success

    return grasped

# ---------------------------------------------------------------- #
#                          States                                  #
# ---------------------------------------------------------------- #

# this state should be refactored to a moving to pickup state
class Pickup(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['Fail','Success'])
        self.counter = 0

    def execute(self, userdata):
        rospy.loginfo('Executing state Pickup')
        command("pickup")

        graspCommand("close")
        command("postGrasp")

        if isGrasped():
            return "Success"
        else:
            return "Fail"
        

class Pre_Grasp(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['Success'])

    def execute(self, userdata):
        rospy.loginfo('Executing state Pre_Grasp')
        while not command("preGrasp"):
            rospy.logwarn("Pre_Grasp Failed... Trying again!")

        
        graspCommand("open")

        return 'Success'

# this state should be refactored to a moving to handoff state
class Handoff_Transition(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['Standby'])


    def execute(self, userdata):
        rospy.loginfo('Executing transition to Handoff')
        command("preHandoff")
        command("handoff")
        return 'Standby'

class Handoff_Standby(smach.State):
    def __init__(self, state_comm):
        smach.State.__init__(self, outcomes=['Ready', 'Not_Ready'])

        self.read_state_comm = state_comm

    def execute(self, userdata):
        rospy.loginfo('Standing by for handoff...')
        other_state = self.read_state_comm().current_state

        graspCommand("open")

        if other_state == 'Handoff':
            return 'Ready'
        else:
            return 'Not_Ready'

class Handoff(smach.State):
    def __init__(self, state_comm):
        smach.State.__init__(self, outcomes=['Handoff_Success', 'Wait_For_Recieve'])

        self.read_state_comm = state_comm

    def execute(self, userdata):
        rospy.loginfo('Performing handoff...')

        other_state = self.read_state_comm().current_state

        

        if other_state == 'Recieved_Handoff':
            return 'Handoff_Success'
        else:
            return 'Wait_For_Recieve'

class Post_Handoff(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['Success', 'Still_Grasped'])

    def execute(self, userdata):
        rospy.loginfo("Returning from handoff..")

        graspCommand("open")

        sleep(1)

        rospy.logwarn(isGrasped())
        if isGrasped():
            return 'Still_Grasped' 
        else:
            command("preHandoff")
            return "Success"

class Wait_For_Success(smach.State):
    def __init__(self, state_comm):
        smach.State.__init__(self, outcomes=['Ready', 'Not_Ready'])

        self.read_state_comm = state_comm

    def execute(self, userdata):
        other_state = self.read_state_comm().current_state

        if other_state == 'Wait_For_Success':
            sleep(2)
            return 'Ready'
        else:
            return 'Not_Ready'

class Reset(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['Success'])

    def execute(self, userdata):
        rospy.wait_for_service('/reset')
        try:
            service = rospy.ServiceProxy('/reset', Trigger)
            success = service()
        except rospy.ServiceException as e:
            rospy.logwarn("Reset Service Failed!")

        return 'Success'

class Handoff_Recieve(smach.State):
    def __init__(self):
        smach.State.__init__(self, outcomes=['Handoff_Success'])

    def execute(self, userdata):
        rospy.loginfo('Recieving handoff...')

        graspCommand("close")
        return 'Handoff_Success'

class Recieved_Handoff(smach.State):
    def __init__(self, state_comm):
        smach.State.__init__(self, outcomes=['Ready', 'Not_Ready'])

        self.read_state_comm = state_comm

    def execute(self, userdata):
        rospy.loginfo('Handoff has been recieved...')

        other_state = self.read_state_comm().current_state

        if other_state == 'Post_Handoff' or other_state == 'Handoff':
            rospy.loginfo('Waiting until Handoff is finished...')
            return 'Not_Ready'
        else:
            rospy.loginfo('Handoff Recieved Successfully')
            rospy.logwarn(other_state)
            return 'Ready'

class Place(smach.State):
    def __init__(self, state_comm):
        smach.State.__init__(self, outcomes=['Success'])

        self.read_state_comm = state_comm

    def execute(self, userdata):
        rospy.loginfo('Performing place...')
        command('pickup')

        graspCommand('open')

        while(isGrasped()):
            rospy.loginfo('Waiting to ungrasp...')
            
        try:
            other_state = self.read_state_comm().current_state
        except:
            return 'Mission_Complete'

        return 'Success'

# ---------------------------------------------------------------- #
#                       State Machine                              #
# ---------------------------------------------------------------- #

        
class Arm_SM:
    def __init__(self):

        rospy.init_node('Arm_SM')

        # Create a stateComm server for this arm
        self.stateComm = rospy.Service('stateComm', StateComm, self.state_comm_callback)

        # Create a SMACH state machine
        self.sm = smach.StateMachine(outcomes=['Mission_Success', 'Mission_Fail'])

                               
        # Create the client for the other arm's stateComm
        other_arm = None
        if rospy.get_namespace() == "/left/":
            other_arm = "/right/"
        else:
            other_arm = "/left/"

        rospy.loginfo('Waiting for service...')
        rospy.wait_for_service(other_arm + 'stateComm')
        self.read_state_comm = rospy.ServiceProxy(other_arm + 'stateComm', StateComm)
        


        if rospy.get_namespace() == "/left/":
            self.get_transfer_sm()
        else:
            self.get_recieve_sm()  

        # Debug GUI
        sis = smach_ros.IntrospectionServer(rospy.get_namespace() + 'server_name', self.sm, rospy.get_namespace() + 'SM_ROOT')
        sis.start()




    def get_transfer_sm(self):
        # Open the container
        with self.sm:
            # Add states to the container
            smach.StateMachine.add('Pre_Grasp', Pre_Grasp(),
                                transitions={'Success':'Pickup'})

            smach.StateMachine.add('Pickup', Pickup(), 
                               transitions={'Fail':'Pre_Grasp', 
                                            'Success':'Handoff_Transition'})

            smach.StateMachine.add('Handoff_Transition', Handoff_Transition(),
                               transitions={'Standby': 'Handoff'})

            smach.StateMachine.add('Handoff', Handoff(self.read_state_comm),
                                transitions={'Handoff_Success': 'Post_Handoff',
                                             'Wait_For_Recieve': 'Handoff'})
            
            smach.StateMachine.add('Post_Handoff', Post_Handoff(),
                                transitions={'Success': 'Wait_For_Success',
                                             'Still_Grasped': 'Post_Handoff'})

            smach.StateMachine.add('Wait_For_Success', Wait_For_Success(self.read_state_comm),
                                transitions={'Ready': 'Reset',
                                             'Not_Ready': 'Wait_For_Success'})

            smach.StateMachine.add('Reset', Reset(),
                                transitions={'Success':'Pre_Grasp'})




    def get_recieve_sm(self):
        with self.sm:
            smach.StateMachine.add('Handoff_Transition', Handoff_Transition(),
                                transitions={'Standby': 'Handoff_Standby'})

            smach.StateMachine.add('Handoff_Standby', Handoff_Standby(self.read_state_comm),
                                transitions={'Ready': 'Handoff_Recieve',
                                             'Not_Ready': 'Handoff_Standby'})

            smach.StateMachine.add('Handoff_Recieve', Handoff_Recieve(),
                                transitions={'Handoff_Success': 'Recieved_Handoff'})

            smach.StateMachine.add('Recieved_Handoff', Recieved_Handoff(self.read_state_comm),
                                transitions={'Ready': 'Place',
                                             'Not_Ready': 'Recieved_Handoff'})

            smach.StateMachine.add('Place', Place(self.read_state_comm),
                                transitions={'Success': 'Wait_For_Success'})

            smach.StateMachine.add('Wait_For_Success', Wait_For_Success(self.read_state_comm),
                                transitions={'Ready': 'Handoff_Transition',
                                             'Not_Ready': 'Wait_For_Success'})

    def state_comm_callback(self, req):
        states = self.sm.get_active_states()
        return states[0]


    def run(self):
        # Execute SMACH plan
        outcome = self.sm.execute()

def main():
    node = Arm_SM()
    node.run()

if __name__ == '__main__':
    main()