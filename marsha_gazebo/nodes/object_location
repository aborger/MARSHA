#!/usr/bin/env python

# object_location

# Broadcast the location of a Gazebo object such as one that needs to be picked up

# Creates a server to get object position

# Server calls Gazebo server so embedded devices dont need to install gazebo msgs

# Author: Aaron Borger <borger.aaron@gmail.com>


import rospy
import sys

# Msg and Srv
from geometry_msgs.msg import Point
from geometry_msgs.msg import Vector3

from marsha_msgs.srv import GetPosFrame
from gazebo_msgs.srv import GetModelState
from marsha_msgs.srv import PositionCmd


class LocationServer():
    def __init__(self):
        rospy.init_node('object_publisher')

        self.pub = rospy.Publisher('object_pos', Point, queue_size=1)
        self.vel_pub = rospy.Publisher('object_vel', Vector3, queue_size=1)

        self.prev_state = None
        self.service = rospy.Service('get_object_pos', GetPosFrame, self.handleObjectPos)
        self.rate = rospy.Rate(100)

        rospy.wait_for_service('/gazebo/get_model_state')

        try:
            self.get_state = rospy.ServiceProxy('/gazebo/get_model_state', GetModelState)
        except:
            rospy.logdebug("Object does not currently exist")

    def handleObjectPos(self, req):
        state = None
        try:
            state = self.get_state("pickup_object", req.relative_frame) #"left_ar3::link_6"
        except Exception as e:

            rospy.logwarn("Service couldnt get state: " + str(e))

        if state != None:
            self.prev_state = state
            return state.pose.position
        else:
            rospy.logdebug(self.prev_state.pose.position)
            return self.prev_state.pose.position



    def run(self):
        while not rospy.is_shutdown():
            #try:
            obj_state = self.get_state("pickup_object", "world")

            pos = obj_state.pose.position
            vel = obj_state.twist.linear
            #rospy.loginfo("x: " + str(pos.x) + ", y: " + str(pos.y) + ", z: " + str(pos.z) + ", dx: " + str(vel.x) + ", dy: " + str(vel.y) + ", dz: " + str(vel.z))
            self.pub.publish(pos)
            self.vel_pub.publish(vel)
            #except Exception as e:
            #    rospy.logwarn("Publisher couldnt get state: " + str(e))


            self.rate.sleep()

if __name__ =='__main__':
  

    server = LocationServer()

    server.run()

