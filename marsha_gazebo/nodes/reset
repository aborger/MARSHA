#!/usr/bin/env python

# reset

# Resets the position of the pickup object

# Author: Aaron Borger

# TODO: Fix the domain randomization, its annoying needing to give value to reset

import rospy
import numpy as np

from gazebo_msgs.srv import DeleteModel
from gazebo_msgs.srv import SpawnModel
from gazebo_msgs.srv import SetLinkProperties
from gazebo_msgs.srv import SetModelState
from gazebo_msgs.srv import ApplyBodyWrench

from gazebo_msgs.msg import ModelState

from geometry_msgs.msg import Twist
from geometry_msgs.msg import Pose
from geometry_msgs.msg import Point
from geometry_msgs.msg import Wrench
from geometry_msgs.msg import Vector3

from std_msgs.msg import Duration

from marsha_msgs.srv import Reset

from marsha_gazebo.auto_domain_randomization import DRandomizer

from std_msgs.msg import Empty
import sys

import random

import time

from std_srvs.srv import Trigger, TriggerResponse
MODEL_NAME = "pickup_object"

# Not using any more, but dont want to delete just incase
#delete_model = rospy.ServiceProxy('/gazebo/delete_model', DeleteModel)
#spawn_model = rospy.ServiceProxy('/gazebo/spawn_urdf_model', SpawnModel)

rospy.wait_for_service('/gazebo/set_model_state')
set_model = rospy.ServiceProxy('/gazebo/set_model_state', SetModelState)

rospy.wait_for_service('/gazebo/apply_body_wrench')
apply_wrench = rospy.ServiceProxy('/gazebo/apply_body_wrench', ApplyBodyWrench)

rospy.wait_for_service('/gazebo/set_link_properties')
set_link_properties = rospy.ServiceProxy('/gazebo/set_link_properties', SetLinkProperties)

rospy.wait_for_service('/gazebo/apply_body_wrench')
apply_body_wrench = rospy.ServiceProxy('/gazebo/apply_body_wrench', ApplyBodyWrench)

randomizer = DRandomizer((2), (-0.25, 0.25))

ar3_pickup = Pose()
ar3_pickup.position.x = -0.3
ar3_pickup.position.y = -0.1
ar3_pickup.position.z = 0.1

arm2d2_fold = Pose()
arm2d2_fold.position.x = -0.025
arm2d2_fold.position.y = -0.22
arm2d2_fold.position.z = 0.125



gravity = True
# If change works well, reset and all its requirements can be deleted
def reset(req):
    print("Resetting...")
    #domain, dar = randomizer.get_domain(req.reward)

    pose = Pose()
    pose.position.x = -1 #-0.3
    pose.position.y = 0.22 #-0.1
    pose.position.z = 0.125 #0.1
    twist = Twist()

    success = set_link_properties(link_name="pickup_object::pickup_object", gravity_mode=gravity)
    #print("gravity success: ", success)
    desired_state = ModelState('pickup_object', pose, twist, 'world')

    resp = set_model(desired_state)
    #print('dar:', dar, type(dar))
    return(resp.success)


class l_dir:
    def __init__(self, x=-0.3, y=-0.3, z=0.3, force=5):
        self.x = x
        self.y = y
        self.z = z
        if (x == 1):
            self.force = Vector3(-1 * force, 0, 0)
        elif (x == -1):
            self.force = Vector3(1 * force, 0, 0)
        elif (y == 1):
            self.force = Vector3(0, -1 * force, 0)
        elif (y == -1):
            self.force = Vector3(0, 1 * force, 0)
        else:
            self.force = Vector3(0, 0, 1 * force)

    def get_pose(self):
        pose = Pose()
        pose.position.x = self.x
        pose.position.y = self.y
        pose.position.z = self.z
        return pose

    def get_randomized_force(self):
        rand = np.random.normal(0, 0.01, size=(3,))
        force = self.force
        force.x += rand[0]
        force.y += rand[1]
        force.z += rand[2]
        return force

    def get_force(self):
        return self.force



ar3_launches = [l_dir(x=1), l_dir(x=-1), l_dir(y=1), l_dir(y=-1)]

arm2d2_launches = [l_dir(x=1, y=0.22, z=0.125), l_dir(x=-1, y=0.22, z=0.125), l_dir(x=-0.22, y=1, z=0.125), l_dir(x=-0.22, y=-1, z=0.125)]


def launcher(data):
    launches = arm2d2_launches
    l = random.choice(launches)
    pose = l.get_pose()
    twist = Twist()

    success = set_link_properties(link_name="pickup_object::pickup_object", gravity_mode=False)
    print("gravity success: ", success)
    desired_state = ModelState('pickup_object', pose, twist, 'world')

    resp = set_model(desired_state)
    print('change success:', resp.success)

    # Add velocity
    ref_point = Point(0, 0, 0)
    wrench = Wrench()
    #wrench.force = Vector3(5, 0, 0)
    wrench.force = l.get_randomized_force()

    duration = rospy.Duration(0.01)

    resp = apply_wrench(
        body_name="pickup_object::pickup_object",
        reference_point=ref_point,
        wrench=wrench,
        duration=duration

    )


    






def reset_server():
    rospy.init_node('reset_server')
    reset(None)
    s = rospy.Subscriber("reset", Empty, reset)
    rospy.spin()

def launch_server():
    rospy.init_node('reset_server')
    launcher(None)
    s = rospy.Subscriber("reset", Empty, launcher)
    rospy.spin()

if __name__ == "__main__":
    for i in range(1, len(sys.argv)):
        if sys.argv[i] == "launch":
            launch_server()
        if sys.argv[i] == "no_grav":
            gravity = False

    reset_server()