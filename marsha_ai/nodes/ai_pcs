#!/usr/bin/env python3


import rospy

from marsha_msgs.srv import PayloadCmd
from marsha_core.pcs_node import *

from stable_baselines3 import TD3
from stable_baselines3.common.callbacks import EvalCallback
from stable_baselines3.common.callbacks import StopTrainingOnMaxEpisodes
from stable_baselines3.common.noise import NormalActionNoise

from marsha_ai.catch_bandit.gym_env import MarshaGym
from marsha_ai.catch_bandit.catch_interface import CatchInterface
from marsha_ai.callbacks import TensorboardCallback

import gym
import tensorflow as tf

#MODEL_DIR = rospy.get_param("/training_dirs/jet2/model_dir")
MODEL_PATH = "/home/jet/catkin_ws/src/marsha/marsha_ai/training/models/arm2d2/flight_model.zip"


class AI_Agent(SystemPCSNode):
    def __init__(self):
        super(AI_Agent, self).__init__("ai_agent")

        left_interface = CatchInterface("left")
        right_interface = CatchInterface("right")
        self.left_env = MarshaGym(left_interface)
        self.right_env = MarshaGym(right_interface)

        # only one model is used to save RAM, it doesn't matter which env its initialized with
        self.model = TD3.load(MODEL_PATH, env=self.left_env)
        
        rospy.loginfo("Agent initialized!")


    def run(self):
        # PCS waits until AI is loaded
        while self.l_pcs_cmd(PCSstate.NA).cmd != PCScmd.PULSE_CHECK and self.r_pcs_cmd(PCSstate.NA).cmd != PCScmd.PULSE_CHECK:
            rospy.sleep(1)

        self.l_pcs_cmd(PCSstate.GOOD)
        self.r_pcs_cmd(PCSstate.GOOD)
        rospy.loginfo("AI running!")
        rospy.sleep(1)

        while True:
            # wait to perform catch
            rospy.loginfo("Waiting to catch...")
            while self.l_pcs_cmd(PCSstate.NA).cmd != PCScmd.ACTIVATE and self.r_pcs_cmd(PCSstate.NA).cmd != PCScmd.ACTIVATE:
                rospy.sleep(1)

            # one of the arms is ready to perform catch
            if self.l_pcs_cmd(PCSstate.NA).cmd == PCScmd.ACTIVATE:
                # perform catch for left arm
                self.l_pcs_cmd(PCSstate.GOOD)
                rospy.loginfo("Left arm under AI control!")

                obs = self.left_env.reset()
                done = False
                while not done:
                    action, states = self.model.predict(obs)
                    obs, rewards, done, info = self.left_env.step(action)
                self.l_pcs_cmd(PCSstate.STATUS_GOOD)


            elif self.r_pcs_cmd(PCSstate.NA).cmd == PCScmd.ACTIVATE:
                # perform catch for right arm
                self.r_pcs_cmd(PCSstate.GOOD)
                rospy.loginfo("Right arm under AI control!")

                obs = self.right_env.reset()
                done = False
                while not done:
                    action, states = self.model.predict(obs)
                    obs, rewards, done, info = self.right_env.step(action)
                self.r_pcs_cmd(PCSstate.STATUS_GOOD)
            else:
                rospy.logerr("(AI PCS) Neither arms ready for catch!")


            


if __name__ == "__main__":
    agent = AI_Agent()
    agent.run()