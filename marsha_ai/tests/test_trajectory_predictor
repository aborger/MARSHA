#!/usr/bin/env python

import time
import rospy

from std_msgs.msg import Empty

from geometry_msgs.msg import Point
from geometry_msgs.msg import Pose
from geometry_msgs.msg import Vector3

from std_srvs.srv import Trigger

from marsha_msgs.srv import PredictPosition
from marsha_msgs.srv import ObjectObservation




class Tester:
    def __init__(self):
        rospy.init_node('trajectory_prediction_tester')

        rospy.wait_for_service('predict_position')
        self.predict_position = rospy.ServiceProxy('predict_position', PredictPosition)

        rospy.wait_for_service('observe_trajectory')
        self.observe_trajectory = rospy.ServiceProxy('observe_trajectory', ObjectObservation)

        rospy.wait_for_service('prediction_ready')
        self.prediction_ready = rospy.ServiceProxy('prediction_ready', Trigger)

        self.reset_pub = rospy.Publisher('/reset', Empty, queue_size=10)

        self.pos_subscriber = rospy.Subscriber('/object_pos', Point, self.posCB)
        self.vel_subscriber = rospy.Subscriber('/object_vel', Vector3, self.velCB)

    
        self.pos = None
        self.vel = None


    def posCB(self, msg):
        self.pos = msg

    def velCB(self, msg):
        self.vel = msg

    def run(self):
        time.sleep(1)
        self.reset_pub.publish()

        poll_rate = rospy.Rate(50)
        while not self.prediction_ready().success:
            print("waiting")
            poll_rate.sleep()
        
        # When ready
        obs = self.observe_trajectory()

        print("obs:", obs)
        print("actual position:\n" + str(self.pos)) 
        print("vel:\n" + str(self.vel))

        prediction = self.predict_position(0.5)

        time_until = prediction.predicted_time.data - rospy.get_rostime()

        print("predicted time:" + str(time_until.to_sec()))
        print("predicted position:\n" + str(prediction.position))

        
        rospy.sleep(time_until)
        print('now')

    




if __name__ == '__main__':
    tester = Tester()
    tester.run()