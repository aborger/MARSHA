#!/usr/bin/env python3

import rospy
import cv2


from marsha_detection.realsense_camera import *

from std_msgs.msg import UInt8MultiArray
from std_msgs.msg import MultiArrayLayout
from std_msgs.msg import MultiArrayDimension
from std_msgs.msg import UInt8


from marsha_msgs.srv import GetFrame



IMAGE_HEIGHT = 720
IMAGE_WIDTH = 1280
CHANNELS = 3


class CamServer():
    def __init__(self):
        self.rs = RealsenseCamera()
        self.get_frame_service = rospy.Service('get_rgb_frame', GetFrame, self.handleFrame)

        self.frame_buffer = None

        self.mal = MultiArrayLayout()
        self.mal.dim.append(MultiArrayDimension())
        self.mal.dim[0].label = "height"
        self.mal.dim[0].size = IMAGE_HEIGHT
        self.mal.dim[0].stride = CHANNELS*IMAGE_WIDTH*IMAGE_HEIGHT
        self.mal.dim.append(MultiArrayDimension())
        self.mal.dim[1].label = "width"
        self.mal.dim[1].size = IMAGE_WIDTH
        self.mal.dim[1].stride = CHANNELS*IMAGE_WIDTH
        self.mal.dim.append(MultiArrayDimension())
        self.mal.dim[2].label = "channel"
        self.mal.dim[2].size = CHANNELS
        self.mal.dim[2].stride = CHANNELS
        self.mal.data_offset = 0

    def handleFrame(self, req):
        
        pixel_list = np.reshape(self.frame_buffer, (CHANNELS*IMAGE_WIDTH*IMAGE_HEIGHT)).tolist()

        msg = UInt8MultiArray()
        msg.layout = self.mal
        msg.data = pixel_list

        return msg
        





    def run(self):
        rospy.init_node('record_depth_cam')

        print('Running...')
        while not rospy.is_shutdown():
            # Get frame
            ret, bgr_frame, depth_frame = self.rs.get_frame_stream()

            self.frame_buffer = bgr_frame

            #while len(self.frame_buffer) > 10:
            #    del self.frame_buffer[0]

            
            cv2.imshow('Cam', bgr_frame)

            key = cv2.waitKey(1)
            if key == 27:
                break
            

        self.rs.release()
        #cv2.destroyAllWindows()

if __name__ == "__main__":
    cam = CamServer()
    cam.run()