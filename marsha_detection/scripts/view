#!/usr/bin/env python3

# This file should be adapted to use oop
import numpy as np

import rospy


import cv2

from marsha_detection import *

from marsha_msgs.srv import GetFrame


############################################################
#  Postprocessing
############################################################

def draw_box(frame, bounding_boxes, class_ids):
    for box, id in zip(bounding_boxes, class_ids):
        x1, y1, x2, y2 = box
        color = COLORS[id]
        color = (int(color[0]), int(color[1]), int(color[2]))

        # Draw bounding box
        cv2.line(frame, (x1, y1), (x2, y1), color, 1) # Top horizontal
        cv2.line(frame, (x1, y2), (x2, y2), color, 1) # Bottom horizontal
        cv2.line(frame, (x1, y1), (x1, y2), color, 1) # Left vertical
        cv2.line(frame, (x2, y1), (x2, y2), color, 1) # Right vertical


    cv2.imshow("Detection Frame", frame)

def draw_mask(frame, masks):
    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    frame_mask = np.zeros(shape=(masks[0].shape[0], masks[0].shape[1], 3), dtype=np.uint8)
    for mask in masks:
        bw_mask = mask*255
        object_mask = np.zeros(shape=(bw_mask.shape[0], bw_mask.shape[1], 3))
        object_mask[:,:,0] = bw_mask
        object_mask[:,:,1] = bw_mask
        object_mask[:,:,2] = bw_mask

        object_mask = object_mask.astype(np.uint8)  
        single_mask = cv2.bitwise_and(frame, object_mask)
        frame_mask = cv2.bitwise_or(frame_mask, single_mask)

        mask_inv = cv2.bitwise_not(bw_mask)
        mask_inv = mask_inv.astype(np.uint8)
        gray_frame = cv2.bitwise_and(gray_frame, mask_inv)


    gray_frame = np.stack((gray_frame,)*3, axis=-1)

    display_frame = gray_frame + frame_mask


    cv2.imshow('Detection', display_frame)

def draw_center(frame, bboxes, positions):
    for box, position in zip(bboxes, positions):
        cx, cy, depth = position
        x1, y1, x2, y2 = box

        color = (36, 255, 12)
        cv2.line(frame, (cx, y1), (cx, y2), color, 1)
        cv2.line(frame, (x1, cy), (x2, cy), color, 1)

    cv2.imshow('Detection', frame)




############################################################
#  Detecting
############################################################


def main():
    rospy.init_node('view_depth_cam')

    rospy.wait_for_service('get_rgb_frame')
    get_frame = rospy.ServiceProxy('get_rgb_frame', GetFrame)

    print('Running...')
    while not rospy.is_shutdown():
        multi_array_frame = get_frame().frame
        frame_height = multi_array_frame.layout.dim[0].size
        frame_width = multi_array_frame.layout.dim[1].size
        frame_channels = multi_array_frame.layout.dim[2].size

        np_frame = np.array(list(multi_array_frame.data))
        frame = np.reshape(np_frame, (frame_height, frame_width, frame_channels)).astype(np.uint8)

        bigger_frame = cv2.resize(frame, (1280, 720))
        cv2.imshow('Detection', bigger_frame)


        key = cv2.waitKey(1)
        if key == 27:
            break

    cv2.destroyAllWindows()


if __name__ == "__main__":
    main()





    """
    

    try:
        while True:
            print('----------------- New Frame ------------------')
            # Get frame from realsense camera
            ret, bgr_frame, depth_frame = rs.get_frame_stream()

            detect(model, bgr_frame, depth_frame)

            key = cv2.waitKey(1)
            if key == 27:
                break
    except Exception as e:
        raise e
    finally:
        rs.release()
        cv2.destroyAllWindows()

    rs.release()
    cv2.destroyAllWindows()
    """
