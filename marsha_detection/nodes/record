#!/usr/bin/env python3

import rospy
import cv2


from marsha_detection.realsense_camera import *

from std_msgs.msg import UInt8MultiArray
from std_msgs.msg import MultiArrayLayout
from std_msgs.msg import MultiArrayDimension
from std_msgs.msg import UInt8
from std_msgs.msg import UInt32
from geometry_msgs.msg import Point


from marsha_msgs.srv import GetFrame
from marsha_msgs.srv import GetDepth


SIZE_REDUCTION = 6
IMAGE_HEIGHT = int(720 / SIZE_REDUCTION) # original: 720
IMAGE_WIDTH = int(1280 / SIZE_REDUCTION) # original: 1280
CHANNELS = 3

RED_CB = (np.array([0, 10, 140]), np.array([60, 75, 255]))
YELLOW_CB = (np.array([20, 80, 80]), np.array([30, 255, 255]))

CONV_SIZE = 5 # Note it will be double this value

def conv_get_depth(frame, x, y):
    depth_list = []
    for col in range(x - CONV_SIZE, x + CONV_SIZE):
        for row in range(y - CONV_SIZE, y + CONV_SIZE):
            depth = frame.get_distance(y, x)
            depth_list.append(depth)

    avg = sum(depth_list) / len(depth_list)
    return avg

def point_to_position(point):
    point[0] -= 0.3
    point[1] -= 0.1
    point[2] -= 0.4
    return point

class CamServer():
    def __init__(self):
        self.rs = RealsenseCamera()
        self.get_frame_service = rospy.Service('get_rgb_frame', GetFrame, self.handleFrame)
        self.get_depth_service = rospy.Service('get_depth', GetDepth, self.handleDepth)

        self.pos_pub = rospy.Publisher('object_pos', Point, queue_size=1)
        self.ball_pub_count = 0

        self.frame_buffer = None
        self.depth_buffer = [] # Current frame = depth_buffer[10]
        self.frame_num = 0

        self.curr_pos = None
        self.curr_pos_frameID = 0

        self.mal = MultiArrayLayout()
        self.mal.dim.append(MultiArrayDimension())
        self.mal.dim[0].label = "height"
        self.mal.dim[0].size = IMAGE_HEIGHT
        self.mal.dim[0].stride = CHANNELS*IMAGE_WIDTH*IMAGE_HEIGHT
        self.mal.dim.append(MultiArrayDimension())
        self.mal.dim[1].label = "width"
        self.mal.dim[1].size = IMAGE_WIDTH
        self.mal.dim[1].stride = CHANNELS*IMAGE_WIDTH
        self.mal.dim.append(MultiArrayDimension())
        self.mal.dim[2].label = "channel"
        self.mal.dim[2].size = CHANNELS
        self.mal.dim[2].stride = CHANNELS
        self.mal.data_offset = 0

    def handleFrame(self, req):
        
        frame = cv2.resize(self.frame_buffer, (IMAGE_WIDTH, IMAGE_HEIGHT))
        pixel_list = np.reshape(frame, (CHANNELS*IMAGE_WIDTH*IMAGE_HEIGHT)).tolist()

        frame = UInt8MultiArray()
        frame.layout = self.mal
        frame.data = pixel_list

        return UInt8(self.frame_num), frame
        

    def handleDepth(self, req):
        #print('Handingling frame:', req.frame_id.data, 'curr frame:', self.frame_num)
        frame_difference = self.frame_num - req.frame_id.data
        buffer_num = 10 - frame_difference

        try:
            depth_frame = self.depth_buffer[buffer_num]


        except IndexError:
            rospy.logerr("Detection System Delayed Too Much!")
            return Point(0, 0, 0)

        x_pix = int(req.x_pixel.data * SIZE_REDUCTION)
        y_pix = int(req.y_pixel.data * SIZE_REDUCTION)
        self.curr_pos = (x_pix, y_pix)
        self.curr_pos_frameID = req.frame_id.data
        point = self.rs.pixel_to_point(depth_frame, x_pix, y_pix)

        position = point_to_position(point)

        return Point(-1*position[0], -1*position[2], -1*position[1]) # Depth is y, y_pix is z

    def detect_color(self, frame, depth_frame):
        #hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        mask = cv2.inRange(frame, RED_CB[0], RED_CB[1])

        kernel = np.ones((12,12), np.uint8)

        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)

        #cv2.imshow('Mask', mask)
        contours, hierarchy = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

        if len(contours) > 0:

            c = max(contours, key = cv2.contourArea)
            area = cv2.contourArea(c)
            if area > 100:
                x,y,w,h = cv2.boundingRect(c)

                cx =  int(x + w/2)
                cy = int(y + h/2)

                cv2.rectangle(frame,(x,y),(x+w,y+h),(0,255,0),2)
                return (frame, cx, cy)
            else:
                print('No object detected')
                return (frame, -1, -1)
        else:
            print('No object detected')
            return (frame, -1, -1)


    def run(self):
        rospy.init_node('record_depth_cam')
        print('Running...')
        while not rospy.is_shutdown():
            # Get frame
            ret, bgr_frame, depth_frame = self.rs.get_frame_stream()

            self.frame_buffer = bgr_frame
            self.depth_buffer.append(depth_frame)

            if len(self.depth_buffer) > 11:
                self.depth_buffer.pop(0)

            #print('Record frame:', self.frame_num)

            self.frame_num += 1

            color = (0, 255, 0)

            #print('Curr pos:', self.curr_pos)

            # Draw a circle on the object if it was recently detected
            #if self.frame_num < self.curr_pos_frameID + 10:
            #    bgr_frame = cv2.circle(bgr_frame, self.curr_pos, 5, color, -1)
            frame, x_pix, y_pix = self.detect_color(bgr_frame, depth_frame)

            if self.ball_pub_count > 0:
                if x_pix > 0 and y_pix > 0:
                    point = self.rs.pixel_to_point(depth_frame, x_pix, y_pix)

                    if point[0] + point[1] + point[2] == 0:
                        print('No object')
                    else:
                        position = point_to_position(point)

                        print('Detected ball at', '(', -1*position[0], -1*position[2], -1*position[1], ')')
                        pos = Point(-1 * position[0], -1 * position[2], -1*position[1])
                        self.pos_pub.publish(pos)
                self.ball_pub_count = 0
            else:
                self.ball_pub_count += 1


            cv2.imshow('Depth', bgr_frame)
            key = cv2.waitKey(1)
            if key == 27:
                break

            # put back in the code to show frames
            

        self.rs.release()
        cv2.destroyAllWindows()

if __name__ == "__main__":
    cam = CamServer()
    cam.run()