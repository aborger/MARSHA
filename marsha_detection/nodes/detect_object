#!/usr/bin/env python3

import rospy
import cv2

import time

import sys

from marsha_detection.realsense_camera import *

from std_msgs.msg import UInt8MultiArray
from std_msgs.msg import MultiArrayLayout
from std_msgs.msg import MultiArrayDimension
from std_msgs.msg import UInt8
from std_msgs.msg import UInt32
from geometry_msgs.msg import Point

from marsha_msgs.srv import PayloadCmd
from marsha_core.pcs_node import *



SIZE_REDUCTION = 6
IMAGE_HEIGHT = int(720 / SIZE_REDUCTION) # original: 720
IMAGE_WIDTH = int(1280 / SIZE_REDUCTION) # original: 1280
CHANNELS = 3

RED_CB = (np.array([0, 5, 120]), np.array([60, 75, 255]))
YELLOW_CB = (np.array([20, 80, 80]), np.array([30, 255, 255]))

CONV_SIZE = 5 # Note it will be double this value


def point_to_position(point):
    point[0] -= 0.3
    point[1] -= 0.1
    point[2] -= 0.4
    return point

class CamDetector(PCSNode):
    def __init__(self):
        super(CamDetector, self).__init__("depth_cam")
        self.rs = RealsenseCamera()

        self.pos_pub = rospy.Publisher('object_pos', Point, queue_size=1)
        self.ball_pub_count = 0

        # check if camera is plugged in and working
        self.state = PCSstate.NA



    def detect_color(self, frame, depth_frame):
        #hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        mask = cv2.inRange(frame, RED_CB[0], RED_CB[1])

        kernel = np.ones((12,12), np.uint8)

        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)

        #cv2.imshow('Mask', mask)
        contours, hierarchy = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)

        if len(contours) > 0:

            c = max(contours, key = cv2.contourArea)
            area = cv2.contourArea(c)
            if area > 100:
                x,y,w,h = cv2.boundingRect(c)

                cx =  int(x + w/2)
                cy = int(y + h/2)

                cv2.rectangle(frame,(x,y),(x+w,y+h),(0,255,0),2)
                return (frame, cx, cy)
            else:
                print('No object detected')
                return (frame, -1, -1)
        else:
            print('No object detected')
            return (frame, -1, -1)


    def run(self):
        spin_rate = 25
        spin_cnt = 25
        while not rospy.is_shutdown():
            if spin_cnt > spin_rate:
                while self.pcs_cmd(self.state).cmd != PCScmd.ACTIVATE:
                    if self.pcs_cmd(self.state).cmd == PCScmd.SHUTDOWN:
                        rospy.signal_shutdown("PCS Shutdown Cmd")
                        self.pcs_cmd(PCSstate.SHUTDOWN)
                    self.state = PCSstate.DISABLED
                    print("waiting for activation...")
                    rospy.sleep(0.5)
                self.state = PCSstate.GOOD
                self.pcs_cmd(self.state)
                spin_cnt = 0

            # Get frame
            ret, bgr_frame, depth_frame = self.rs.get_frame_stream()
            if ret == False:
                print("error")

            color = (0, 255, 0)

            frame, x_pix, y_pix = self.detect_color(bgr_frame, depth_frame)

            # ball_pub_count reduces the frequency of publishing
            if self.ball_pub_count > 0:
                if x_pix > 0 and y_pix > 0:
                    point = self.rs.pixel_to_point(depth_frame, x_pix, y_pix)

                    if point[0] + point[1] + point[2] == 0:
                        print('No object')
                    else:
                        position = point_to_position(point)

                        print('Detected ball at', '(', -1*position[0], -1*position[2], -1*position[1], ')')
                        pos = Point(-1 * position[0], -1 * position[2], -1*position[1])
                        self.pos_pub.publish(pos)
                self.ball_pub_count = 0
            else:
                self.ball_pub_count += 1

            spin_cnt += 1

            #cv2.imshow('Depth', bgr_frame)
            #key = cv2.waitKey(1)
            #if key == 27:
            #    break
            


        self.rs.release()
        cv2.destroyAllWindows()

if __name__ == "__main__":
    cam = CamDetector()
    cam.run()