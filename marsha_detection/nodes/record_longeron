#!/usr/bin/env python


# Note: There was an issue when the right camera was pushed into the mount where ssh and remote desktop where disconnected from the jetson
import cv2
import numpy as np
import os

import rospy

from marsha_msgs.srv import PayloadCmd
from marsha_core.pcs_node import *

# gstreamer_pipeline returns a GStreamer pipeline for capturing from the CSI camera
# Defaults to 1280x720 @ 60fps
# Flip the image by setting the flip_method (most common values: 0 and 2)
# display_width and display_height determine the size of the window on the screen

RECORD_FILE = 'cv2_test.avi'
FPS = 60
SIZE = (2560, 720)


def gstreamer_pipeline(
    camera_id=0,
    capture_width=1280,
    capture_height=720,
    display_width=1280,
    display_height=720,
    framerate=60,
    flip_method=0, # 0 = no rotation, 1 = 90 deg counterclockwise, 2 = 180 deg, 3 = 90 deg clockwise, 4 = horizontal flip, 5 - Upper right diagonal flip, 6 = vertical flip, 7 = upper left diagonal
):
    return (
        "nvarguscamerasrc "
        "sensor-id=%d ! "
        "video/x-raw(memory:NVMM), "
        "width=(int)%d, height=(int)%d, "
        "format=(string)NV12, framerate=(fraction)%d/1 ! "
        "nvvidconv flip-method=%d ! "
        "video/x-raw, width=(int)%d, height=(int)%d, format=(string)BGRx ! "
        "videoconvert ! "
        "video/x-raw, format=(string)BGR ! appsink "
        % (
            camera_id,
            capture_width,
            capture_height,
            framerate,
            flip_method,
            display_width,
            display_height,
        )
    )

class Cam:
    def __init__(self, cam_id=0):
        self.cam_id = cam_id
        self.capture = cv2.VideoCapture(gstreamer_pipeline(camera_id=cam_id, flip_method=2), cv2.CAP_GSTREAMER)

    def read(self):
        return self.capture.read()

    def show(self):
        ret, frame = self.read()
        cv2.imshow("Cam" + str(self.cam_id), frame)

    def get_frame(self):
        ret, frame = self.read()
        return frame

    def capturing(self):
        return self.capture.isOpened()

    def release(self):
        self.capture.release()

# Recorder is a payload subsystem node
class Recorder(PCSNode):
    def __init__(self):
        super(Recorder, self).__init__("longeron_cams")
        self.r_cam = Cam(0)
        self.l_cam = Cam(1)

        self.state = PCSstate.NA

        self.r_cam_running = False
        self.l_cam_running = False


        # This should better test if both cams are working
        if self.r_cam.capturing():
            try:
                r_frame = self.r_cam.get_frame()

                if type(r_frame) == np.ndarray:
                    self.state = PCSstate.GOOD
                    self.r_cam_running = True
                else:
                    rospy.logwarn("Failed to create Capture, resetting cameras...")
                    os.system("~/catkin_ws/src/marsha/marsha_detection/restart_cams.sh")
                    self.state = PCSstate.ERROR1
                    rospy.sleep(0.5)
                    
            except Exception as e:
                self.state = PCSstate.ERROR2
                rospy.logerr("Longeron Error 2")
                print(e)
        else:
            rospy.logerr("Longeron Error 3")
            self.state = PCSstate.ERROR3

            
        if self.l_cam.capturing():
            try:
                l_frame = self.l_cam.get_frame()

                if type(l_frame) == np.ndarray:
                    if self.state == PCSstate.GOOD:
                        # its already good
                        self.l_cam_running = True
                else:
                    rospy.logwarn("Failed to create Capture, resetting cameras...")
                    # https://askubuntu.com/questions/155791/how-do-i-sudo-a-command-in-a-script-without-being-asked-for-a-password
                    os.system("sudo ~/catkin_ws/src/marsha/marsha_detection/restart_cams.sh")
                    self.state = PCSstate.ERROR1
            except Exception as e:
                self.state = PCSstate.ERROR2
                rospy.logerr("Longeron Error 2")
                print(e)
        else:
            rospy.logerr("Longeron Error 3")
            self.state = PCSstate.ERROR3
                        


        self.pcs_cmd(self.state)




        
        

    def run(self):
        while self.pcs_cmd(self.state).cmd != PCScmd.ACTIVATE:

            rospy.sleep(0.5)

        spin_rate = 100
        spin_cnt = 0

        rospy.loginfo("Longeron Cams Recording...")
        while True:
            if self.r_cam_running:
                self.r_cam.get_frame()
            if self.l_cam_running:
                self.l_cam.get_frame()

            spin_cnt += 1

            if spin_cnt > spin_rate:
                cmd = self.pcs_cmd(PCSstate.GOOD).cmd
                if cmd == PCScmd.DEACTIVATE:
                    self.pcs_cmd(PCSstate.DISABLED)
                    break

        rospy.loginfo("Deactivating longeron cams")
        self.r_cam.release()
        self.l_cam.release()






    def record_dual():
        r_cam = Cam(0)
        l_cam = Cam(1)

        recorder = cv2.VideoWriter(RECORD_FILE, cv2.VideoWriter_fourcc(*'XVID'), FPS, SIZE)

        if l_cam.capturing() and r_cam.capturing():
            try:
                while True:

                    combined = np.concatenate((l_cam.get_frame(), r_cam.get_frame()), axis=1)
                    
                    #resized = cv2.resize(combined, (1280, 720), interpolation=cv2.INTER_AREA)
                    cv2.imshow("Combined", combined)

                    recorder.write(combined)
                    
                    #l_cam.show()
                    #r_cam.show()

                    keyCode = cv2.waitKey(30) & 0xFF
                    # Stop the program on the ESC key
                    if keyCode == 27:
                        break

            except ValueError:
                print("Error getting video from cameras. Restart them with the restart cam script")
            
            l_cam.release()
            r_cam.release()
            cv2.destroyAllWindows()
        else:
            print("Unable to open cameras")








if __name__ == "__main__":
    recorder = Recorder()
    recorder.run()
    print("done")