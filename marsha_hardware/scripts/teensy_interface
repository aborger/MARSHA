#!/usr/bin/env python2

import rospy
import serial
import time
import json

from std_srvs.srv import Trigger, TriggerRequest

from marsha_msgs.msg import TeensyMsg
from marsha_msgs.srv import MoveCmd

class Interface():

    def __init__(self):
        rospy.init_node('teensy_interface')

        self.led_cmd = False
        self.tx_rate = 2000
        self.tx_cnt = 0
        self.connected = False

        rospy.Service('gripper/grasp_cmd', MoveCmd, self.graspCmdCallback)
        rospy.Service('gripper/is_grasped', Trigger, self.is_grasped_callback)

        rospy.Subscriber('teensy_cmd', TeensyMsg, self.teensyCmdCallback)
        self.enc_pub = rospy.Publisher('enc_feedback', TeensyMsg, queue_size=10)

        self.step_cmd = []
        self.fake_joint_pos = 0
        self.grasped = False


        self.gripper_cmd = rospy.get_param('/gripper/hw/close')


        while not self.connected:
            try:
                self.arduino = serial.Serial(
                    port = '/dev/ttyACM0',
                    baudrate = 115200,
                    bytesize = serial.EIGHTBITS,
                    parity = serial.PARITY_NONE,
                    stopbits = serial.STOPBITS_ONE,
                    timeout = 10,
                    xonxoff = False,
                    rtscts = False,
                    dsrdtr = False,
                    writeTimeout = 2
                )
                self.connected = True
            except KeyboardInterrupt:
                exit()
            except Exception as e:
                print(e)
                time.sleep(1)

    def is_grasped_callback(self, msg):
        return self.grasped

    def graspCmdCallback(self, msg):
        rospy.loginfo('Gripper pose:' + str(msg.pose_name))
        self.gripper_cmd = rospy.get_param('gripper/hw/' + msg.pose_name)
        return True

    def teensyCmdCallback(self, msg):
        cmd = list(msg.steps)
        self.fake_joint_pos = cmd[-1]
        cmd[-1] = self.gripper_cmd
        self.step_cmd = cmd
        #print ('Command: ' +  str(self.step_cmd))



    def transmit_step(self):
        data = {"steps": self.step_cmd}
        data_str = json.dumps(data) + '\n'
        data_bytes = data_str.encode('utf-8')

        self.arduino.write(data_bytes)

    def transmit_led(self):
        data = {"led": int(self.led_cmd)}
        data_str = json.dumps(data) + '\n'
        data_bytes = data_str.encode('utf-8')
        print('Cmd:', data_bytes)
        self.arduino.write(data_bytes)
        self.led_cmd = not self.led_cmd



    def run(self):
        self.arduino.reset_input_buffer()
        while not rospy.is_shutdown():
            if self.tx_cnt > self.tx_rate:
                self.transmit_step()
                self.tx_cnt = 0
            else:
                self.tx_cnt += 1



            # read
            #char = arduino.read().decode()
            data_available = self.arduino.in_waiting
            if data_available > 0:
                try:
                    json_string = self.arduino.read(data_available).decode()
                    rx_dict = json.loads(json_string)
                    encoders = rx_dict["enc_feedback"]
                    if encoders[-1] > self.gripper_cmd:
                        self.grasped = True
                    else:
                        self.grasped = False
                    
                    self.enc_pub.publish(encoders)
                    print ('Encoders:  ' +  str(rx_dict["enc_feedback"]))
                          #' Step: ' +  str(rx_dict["curr_step"]) +
                          #' Speed: ' + str(rx_dict["curr_speed"]) +
                          #' Err Sum: ' + str(rx_dict["err_sum"]))
                except Exception as e: 
                    print("Error:", e)
        

if __name__ == "__main__":
    interface = Interface()

    interface.run()