#!/usr/bin/env python2

import rospy
import serial
import time
import json
import math
import os

from std_srvs.srv import Trigger, TriggerResponse
from std_msgs.msg import Bool

from marsha_msgs.msg import TeensyMsg
from marsha_msgs.srv import MoveCmd
from marsha_msgs.srv import JointCmd

from marsha_msgs.srv import PayloadCmd

from control_msgs.srv import QueryTrajectoryState

# Contains command chmod -R 777 /dev/ttyTHS1
# https://askubuntu.com/questions/155791/how-do-i-sudo-a-command-in-a-script-without-being-asked-for-a-password
os.system("sudo /home/aaron/unlock_serial.sh")

ANGLE_TOLERANCE = 10
CMD_EXECUTION_ATTEMPTS = 30

def deg_to_rad(degree):
    return degree / 180 * math.pi



class Interface():

    def __init__(self):
        rospy.init_node("teensy_interface")
        self.ready_pub = rospy.Publisher('marsha_ready', Bool, queue_size=10)
        self.ready = False
        self.ready_pub.publish(False)
        rospy.sleep(1)


        self.led_cmd = False
        self.tx_rate = 5 # 2500 Node rate is 50 Hz so tx_rate is 50 / 5 = 10 Hz or 5 times a second
        self.tx_cnt = 0
        self.connected = False

        rospy.wait_for_service('joint_cmd')
        self.joint_cmd = rospy.ServiceProxy('joint_cmd', JointCmd)

        # Prevents Jerkiness
        # AR3: self.controller_state = rospy.ServiceProxy('/left/ar3/controllers/position/query_state', QueryTrajectoryState)
        print("waiting for service")
        rospy.wait_for_service('arm2d2/controllers/position/query_state')
        self.controller_state = rospy.ServiceProxy('arm2d2/controllers/position/query_state', QueryTrajectoryState)
        print("service found")

        rospy.Service('gripper/grasp_cmd', MoveCmd, self.graspCmdCallback)
        rospy.Service('gripper/is_grasped', Trigger, self.is_grasped_callback)
        rospy.Service('teensy_cmd_executed', Trigger, self.execution_state_cb)

        rospy.Subscriber('teensy_cmd', TeensyMsg, self.teensyCmdCallback)
        self.enc_pub = rospy.Publisher('enc_feedback', TeensyMsg, queue_size=10)

        self.step_cmd = []
        self.enc_step = []
        self.execution_checks = 0
        self.teensy_watchdog_cnt = 0

        self.fake_joint_pos = 0
        self.grasped = False
        self.grasp_time = 0

        # True represents closed
        self.gripper_state = "close"
        self.gripper_cmd = rospy.get_param('/gripper/hw/close')

        self.calibrating = False

        self.rate = rospy.Rate(50)


        rospy.loginfo("Connecting...")

        while not self.connected:
            try:
                self.arduino = serial.Serial(
                    port = '/dev/ttyTHS1',
                    baudrate = 9600, # 115200 can be used, but data is less reliable
                    bytesize = serial.EIGHTBITS,
                    parity = serial.PARITY_NONE,
                    stopbits = serial.STOPBITS_ONE,
                    timeout = 10,
                    xonxoff = False,
                    rtscts = False,
                    dsrdtr = False,
                    writeTimeout = 5
                )
                self.connected = True
		rospy.loginfo("Connected on /dev/ttyTHS1")
            except KeyboardInterrupt:
                exit()
            except Exception as e:
                rospy.logerr(e)
                time.sleep(1)
                try:
                    self.arduino = serial.Serial(
                        port = '/dev/ttyACM0',
                        baudrate = 9600, # 115200 can be used, but data is less reliable
                        bytesize = serial.EIGHTBITS,
                        parity = serial.PARITY_NONE,
                        stopbits = serial.STOPBITS_ONE,
                        timeout = 10,
                        xonxoff = False,
                        rtscts = False,
                        dsrdtr = False,
                        writeTimeout = 5
                    )
                    self.connected = True
		    rospy.loginfo("Connected on /dev/ttyACM0")
                except Exception as e:
                    rospy.logerr(e)
                    time.sleep(1)

        if self.connected:
            rospy.loginfo("Connected!")
        else:
            rospy.logfatal("Could not connect to teensy!")
            rospy.signal_shutdown("Could not connect to teensy.")


        #self.calibrate_callback(None)

    def is_grasped_callback(self, msg):
        res = TriggerResponse()
        res.success = self.grasped
        return res

    def graspCmdCallback(self, msg):
        rospy.loginfo('Gripper pose:' + str(msg.pose_name))
        self.gripper_state = msg.pose_name
        self.gripper_cmd = rospy.get_param('/gripper/hw/' + msg.pose_name)
        return True

    # should probably be determined by the joint angle not changing
    def execution_state_cb(self, msg):
        res = TriggerResponse()
        res.success = True
        deg_per_steps = rospy.get_param('stepper_config/deg_per_step')
        for joint_cmd, joint_enc, deg_per_step in zip(self.step_cmd, self.enc_step, deg_per_steps):
            if (joint_cmd - joint_enc) * deg_per_step < 0 - ANGLE_TOLERANCE or (joint_cmd - joint_enc) * deg_per_step > 0 + ANGLE_TOLERANCE:
                res.success = False
                if self.execution_checks > CMD_EXECUTION_ATTEMPTS:
                    rospy.logwarn("Not Executing! Step CMD: " + str(joint_cmd) + " Encoder step: " + str(joint_enc))
                    res.message = "fail"
                    self.execution_checks = 0
        if not res.success:
            self.execution_checks += 1
        else:
            self.execution_checks = 0
    

        return res

    def calibrate_callback(self, msg):
        deg_per_steps = rospy.get_param('stepper_config/deg_per_step')
        limit_degs = rospy.get_param('stepper_config/limit_position')
        limit_steps = []
        

        if len(limit_degs) != len(deg_per_steps):
            raise Exception('Stepper Config does not contain the correct number of steppers')
        for i in range(len(limit_degs)-1):
            limit_steps.append(int(limit_degs[i] / deg_per_steps[i]))

        #print('limit_steps:' + str(limit_steps))
        data = {"steps": limit_steps}
        data_str = json.dumps(data) + '\n'
        rospy.loginfo("data" + data_str)
        data_bytes = data_str.encode('utf-8')

        limit_rads = [deg_to_rad(i) for i in limit_degs]
        self.step_cmd = limit_steps
        self.arduino.write(data_bytes)
        j_success = self.joint_cmd(limit_rads)
        print("j cmd success", j_success)
        self.calibrating = False
        rospy.loginfo("Steps:" + str(limit_steps))
        rospy.loginfo("Calibrating...")
        #limit_rads[1] = limit_rads[1] - 0.26
        #limit_rads[2] = limit_rads[2] + 0.087
        res = TriggerResponse()
        res.success = True
        return res


    def teensyCmdCallback(self, msg):
        cmd = list(msg.steps)
        #print('cmd:', cmd)
        self.fake_joint_pos = cmd[-1]
        cmd[-1] = self.gripper_cmd
        self.step_cmd = cmd
        #print('callback:', self.step_cmd)
        #print ('Command: ' +  str(self.step_cmd))



    def transmit_step(self):
        # Note: Moveit for some reason tries to move back to zero...
        # Checking if the controller acceleration == 0 is a really bad fix to the problem...
        state = self.controller_state(rospy.get_rostime())
        if state.acceleration[0] == 0.0:
            data = {"steps": self.step_cmd}
            print("cmd:" + str(self.step_cmd))
            data_str = json.dumps(data) + '\n'
            data_bytes = data_str.encode('utf-8')
            try:
                self.arduino.write(data_bytes)
            except serial.serialutil.SerialException as e:
                rospy.logwarn("Failed to write to teensy.")
                print(e)
            #rospy.loginfo("tx: " +  str(data_bytes))


    def run(self):
        self.arduino.reset_input_buffer()
        rospy.loginfo("Running, If no data appears ensure the teensy is communicating through the same serial port.")
        while not rospy.is_shutdown():
            if not self.calibrating:
                if self.tx_cnt > self.tx_rate:
                    self.transmit_step()
                    self.tx_cnt = 0
                else:
                    self.tx_cnt += 1



            # read
            #char = arduino.read().decode()
            data_available = 0
            try:
                data_available = self.arduino.in_waiting
            except Exception as e:
                rospy.logwarn("Error checking data: " + str(e))
            else:
                if data_available > 0:
                    if not self.ready:
                        print("Publishing ready")
                        self.ready_pub.publish(True)
                        self.ready = True
                    if self.calibrating:
                        self.calibrating = False
                        rospy.loginfo("Calibration Complete!")
                    try:
                        #string = self.arduino.read_until("}")
                        string = self.arduino.read_until("}")
                        #print(string)
                        json_string = string.decode()
                        rx_dict = json.loads(json_string)
                        encoders = rx_dict["enc_feedback"]

                        if encoders[-1] > rospy.get_param('/gripper/hw/' + self.gripper_state) + 100:
                            self.grasped = True
                            if self.grasp_time == 0:
                                self.grasp_time = rospy.get_rostime()
                            else:
                                if (rospy.get_rostime() - self.grasp_time).to_sec() > 4:
                                    self.gripper_cmd = encoders[-1]
                        else:
                            self.grasped = False
                            self.grasp_time = 0
                        
                        print('Encoders:  ' +  str(rx_dict["enc_feedback"]))
                        self.enc_pub.publish(encoders)
                        self.enc_step = encoders
                        self.teensy_watchdog_cnt = 0
                        
                        #print("Grip feedback", rx_dict["grip_desired"])
                                #' Step: ' +  str(rx_dict["curr_step"]) +
                                #' Speed: ' + str(rx_dict["curr_speed"]) +
                                #' Err Sum: ' + str(rx_dict["err_sum"]))
                    except Exception as e:
                        #    raise(e) 
                        # This issue is caused because the teensy interface is polling for data on the recieve line.
                        # This can be fixed by creating an interrupt to place any recieved data in a buffer.
                        # Currently it is not a large enough issue to spend the time doing this
                        rospy.logwarn(e)
                        rospy.logdebug("Data Received during error: " + string)
                        #    rospy.logwarn("Teensy feedback rate is faster than the jetson can handle. Multiple transmissions recieved before Teensy Interface was ready.")
                        #    rospy.logdebug("Recv: " + json_string)
                    except KeyError:
                        rospy.logerr("Communicated with Teensy, but un-readable data received.")
            self.teensy_watchdog_cnt += 1

            if self.teensy_watchdog_cnt > 30:
		rospy.logfatal("Teensy watchdog counter failed!")
                rospy.signal_shutdown("Watchdog failed. Restarting.")
            self.rate.sleep()


        

if __name__ == "__main__":
    #os.system("sudo chmod -R 777 /dev/ttyTHS1")
    interface = Interface()
    print("running...")
    interface.run()
